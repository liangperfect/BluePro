package com.vitalong.inclinometer.greendaodb;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.vitalong.inclinometer.bean.SurveyDataTable;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "SURVEY_DATA_TABLE".
*/
public class SurveyDataTableDao extends AbstractDao<SurveyDataTable, Long> {

    public static final String TABLENAME = "SURVEY_DATA_TABLE";

    /**
     * Properties of entity SurveyDataTable.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property CsvFileName = new Property(1, String.class, "csvFileName", false, "CSV_FILE_NAME");
        public final static Property Depth = new Property(2, String.class, "depth", false, "DEPTH");
        public final static Property A0mm = new Property(3, String.class, "A0mm", false, "A0MM");
        public final static Property A180mm = new Property(4, String.class, "A180mm", false, "A180MM");
        public final static Property B0mm = new Property(5, String.class, "B0mm", false, "B0MM");
        public final static Property B180mm = new Property(6, String.class, "B180mm", false, "B180MM");
        public final static Property A0Deg = new Property(7, String.class, "A0Deg", false, "A0_DEG");
        public final static Property A180Deg = new Property(8, String.class, "A180Deg", false, "A180_DEG");
        public final static Property B0Deg = new Property(9, String.class, "B0Deg", false, "B0_DEG");
        public final static Property B180Deg = new Property(10, String.class, "B180Deg", false, "B180_DEG");
        public final static Property A0Raw = new Property(11, String.class, "A0Raw", false, "A0_RAW");
        public final static Property A180Raw = new Property(12, String.class, "A180Raw", false, "A180_RAW");
        public final static Property B0Raw = new Property(13, String.class, "B0Raw", false, "B0_RAW");
        public final static Property B180Raw = new Property(14, String.class, "B180Raw", false, "B180_RAW");
        public final static Property CheckSumA = new Property(15, String.class, "CheckSumA", false, "CHECK_SUM_A");
        public final static Property CheckSumB = new Property(16, String.class, "CheckSumB", false, "CHECK_SUM_B");
    }


    public SurveyDataTableDao(DaoConfig config) {
        super(config);
    }
    
    public SurveyDataTableDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"SURVEY_DATA_TABLE\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"CSV_FILE_NAME\" TEXT," + // 1: csvFileName
                "\"DEPTH\" TEXT," + // 2: depth
                "\"A0MM\" TEXT," + // 3: A0mm
                "\"A180MM\" TEXT," + // 4: A180mm
                "\"B0MM\" TEXT," + // 5: B0mm
                "\"B180MM\" TEXT," + // 6: B180mm
                "\"A0_DEG\" TEXT," + // 7: A0Deg
                "\"A180_DEG\" TEXT," + // 8: A180Deg
                "\"B0_DEG\" TEXT," + // 9: B0Deg
                "\"B180_DEG\" TEXT," + // 10: B180Deg
                "\"A0_RAW\" TEXT," + // 11: A0Raw
                "\"A180_RAW\" TEXT," + // 12: A180Raw
                "\"B0_RAW\" TEXT," + // 13: B0Raw
                "\"B180_RAW\" TEXT," + // 14: B180Raw
                "\"CHECK_SUM_A\" TEXT," + // 15: CheckSumA
                "\"CHECK_SUM_B\" TEXT);"); // 16: CheckSumB
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"SURVEY_DATA_TABLE\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, SurveyDataTable entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String csvFileName = entity.getCsvFileName();
        if (csvFileName != null) {
            stmt.bindString(2, csvFileName);
        }
 
        String depth = entity.getDepth();
        if (depth != null) {
            stmt.bindString(3, depth);
        }
 
        String A0mm = entity.getA0mm();
        if (A0mm != null) {
            stmt.bindString(4, A0mm);
        }
 
        String A180mm = entity.getA180mm();
        if (A180mm != null) {
            stmt.bindString(5, A180mm);
        }
 
        String B0mm = entity.getB0mm();
        if (B0mm != null) {
            stmt.bindString(6, B0mm);
        }
 
        String B180mm = entity.getB180mm();
        if (B180mm != null) {
            stmt.bindString(7, B180mm);
        }
 
        String A0Deg = entity.getA0Deg();
        if (A0Deg != null) {
            stmt.bindString(8, A0Deg);
        }
 
        String A180Deg = entity.getA180Deg();
        if (A180Deg != null) {
            stmt.bindString(9, A180Deg);
        }
 
        String B0Deg = entity.getB0Deg();
        if (B0Deg != null) {
            stmt.bindString(10, B0Deg);
        }
 
        String B180Deg = entity.getB180Deg();
        if (B180Deg != null) {
            stmt.bindString(11, B180Deg);
        }
 
        String A0Raw = entity.getA0Raw();
        if (A0Raw != null) {
            stmt.bindString(12, A0Raw);
        }
 
        String A180Raw = entity.getA180Raw();
        if (A180Raw != null) {
            stmt.bindString(13, A180Raw);
        }
 
        String B0Raw = entity.getB0Raw();
        if (B0Raw != null) {
            stmt.bindString(14, B0Raw);
        }
 
        String B180Raw = entity.getB180Raw();
        if (B180Raw != null) {
            stmt.bindString(15, B180Raw);
        }
 
        String CheckSumA = entity.getCheckSumA();
        if (CheckSumA != null) {
            stmt.bindString(16, CheckSumA);
        }
 
        String CheckSumB = entity.getCheckSumB();
        if (CheckSumB != null) {
            stmt.bindString(17, CheckSumB);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, SurveyDataTable entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String csvFileName = entity.getCsvFileName();
        if (csvFileName != null) {
            stmt.bindString(2, csvFileName);
        }
 
        String depth = entity.getDepth();
        if (depth != null) {
            stmt.bindString(3, depth);
        }
 
        String A0mm = entity.getA0mm();
        if (A0mm != null) {
            stmt.bindString(4, A0mm);
        }
 
        String A180mm = entity.getA180mm();
        if (A180mm != null) {
            stmt.bindString(5, A180mm);
        }
 
        String B0mm = entity.getB0mm();
        if (B0mm != null) {
            stmt.bindString(6, B0mm);
        }
 
        String B180mm = entity.getB180mm();
        if (B180mm != null) {
            stmt.bindString(7, B180mm);
        }
 
        String A0Deg = entity.getA0Deg();
        if (A0Deg != null) {
            stmt.bindString(8, A0Deg);
        }
 
        String A180Deg = entity.getA180Deg();
        if (A180Deg != null) {
            stmt.bindString(9, A180Deg);
        }
 
        String B0Deg = entity.getB0Deg();
        if (B0Deg != null) {
            stmt.bindString(10, B0Deg);
        }
 
        String B180Deg = entity.getB180Deg();
        if (B180Deg != null) {
            stmt.bindString(11, B180Deg);
        }
 
        String A0Raw = entity.getA0Raw();
        if (A0Raw != null) {
            stmt.bindString(12, A0Raw);
        }
 
        String A180Raw = entity.getA180Raw();
        if (A180Raw != null) {
            stmt.bindString(13, A180Raw);
        }
 
        String B0Raw = entity.getB0Raw();
        if (B0Raw != null) {
            stmt.bindString(14, B0Raw);
        }
 
        String B180Raw = entity.getB180Raw();
        if (B180Raw != null) {
            stmt.bindString(15, B180Raw);
        }
 
        String CheckSumA = entity.getCheckSumA();
        if (CheckSumA != null) {
            stmt.bindString(16, CheckSumA);
        }
 
        String CheckSumB = entity.getCheckSumB();
        if (CheckSumB != null) {
            stmt.bindString(17, CheckSumB);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public SurveyDataTable readEntity(Cursor cursor, int offset) {
        SurveyDataTable entity = new SurveyDataTable( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // csvFileName
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // depth
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // A0mm
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // A180mm
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // B0mm
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // B180mm
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // A0Deg
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // A180Deg
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // B0Deg
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // B180Deg
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // A0Raw
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // A180Raw
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // B0Raw
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // B180Raw
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // CheckSumA
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16) // CheckSumB
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, SurveyDataTable entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setCsvFileName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setDepth(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setA0mm(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setA180mm(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setB0mm(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setB180mm(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setA0Deg(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setA180Deg(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setB0Deg(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setB180Deg(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setA0Raw(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setA180Raw(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setB0Raw(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setB180Raw(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setCheckSumA(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setCheckSumB(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(SurveyDataTable entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(SurveyDataTable entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(SurveyDataTable entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
