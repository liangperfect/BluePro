package com.vitalong.inclinometer.greendaodb;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.vitalong.inclinometer.bean.BoreholeInfoTable;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "BOREHOLE_INFO_TABLE".
*/
public class BoreholeInfoTableDao extends AbstractDao<BoreholeInfoTable, Long> {

    public static final String TABLENAME = "BOREHOLE_INFO_TABLE";

    /**
     * Properties of entity BoreholeInfoTable.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property ConstructionSite = new Property(1, String.class, "constructionSite", false, "CONSTRUCTION_SITE");
        public final static Property HoleName = new Property(2, String.class, "holeName", false, "HOLE_NAME");
        public final static Property A0Des = new Property(3, String.class, "a0Des", false, "A0_DES");
        public final static Property TopValue = new Property(4, float.class, "topValue", false, "TOP_VALUE");
        public final static Property BottomValue = new Property(5, float.class, "bottomValue", false, "BOTTOM_VALUE");
        public final static Property PointsNumber = new Property(6, int.class, "pointsNumber", false, "POINTS_NUMBER");
        public final static Property Duration = new Property(7, float.class, "duration", false, "DURATION");
        public final static Property CsvFileName = new Property(8, float.class, "csvFileName", false, "CSV_FILE_NAME");
    }


    public BoreholeInfoTableDao(DaoConfig config) {
        super(config);
    }
    
    public BoreholeInfoTableDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"BOREHOLE_INFO_TABLE\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"CONSTRUCTION_SITE\" TEXT," + // 1: constructionSite
                "\"HOLE_NAME\" TEXT," + // 2: holeName
                "\"A0_DES\" TEXT," + // 3: a0Des
                "\"TOP_VALUE\" REAL NOT NULL ," + // 4: topValue
                "\"BOTTOM_VALUE\" REAL NOT NULL ," + // 5: bottomValue
                "\"POINTS_NUMBER\" INTEGER NOT NULL ," + // 6: pointsNumber
                "\"DURATION\" REAL NOT NULL ," + // 7: duration
                "\"CSV_FILE_NAME\" REAL NOT NULL );"); // 8: csvFileName
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"BOREHOLE_INFO_TABLE\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, BoreholeInfoTable entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String constructionSite = entity.getConstructionSite();
        if (constructionSite != null) {
            stmt.bindString(2, constructionSite);
        }
 
        String holeName = entity.getHoleName();
        if (holeName != null) {
            stmt.bindString(3, holeName);
        }
 
        String a0Des = entity.getA0Des();
        if (a0Des != null) {
            stmt.bindString(4, a0Des);
        }
        stmt.bindDouble(5, entity.getTopValue());
        stmt.bindDouble(6, entity.getBottomValue());
        stmt.bindLong(7, entity.getPointsNumber());
        stmt.bindDouble(8, entity.getDuration());
        stmt.bindDouble(9, entity.getCsvFileName());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, BoreholeInfoTable entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String constructionSite = entity.getConstructionSite();
        if (constructionSite != null) {
            stmt.bindString(2, constructionSite);
        }
 
        String holeName = entity.getHoleName();
        if (holeName != null) {
            stmt.bindString(3, holeName);
        }
 
        String a0Des = entity.getA0Des();
        if (a0Des != null) {
            stmt.bindString(4, a0Des);
        }
        stmt.bindDouble(5, entity.getTopValue());
        stmt.bindDouble(6, entity.getBottomValue());
        stmt.bindLong(7, entity.getPointsNumber());
        stmt.bindDouble(8, entity.getDuration());
        stmt.bindDouble(9, entity.getCsvFileName());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public BoreholeInfoTable readEntity(Cursor cursor, int offset) {
        BoreholeInfoTable entity = new BoreholeInfoTable( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // constructionSite
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // holeName
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // a0Des
            cursor.getFloat(offset + 4), // topValue
            cursor.getFloat(offset + 5), // bottomValue
            cursor.getInt(offset + 6), // pointsNumber
            cursor.getFloat(offset + 7), // duration
            cursor.getFloat(offset + 8) // csvFileName
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, BoreholeInfoTable entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setConstructionSite(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setHoleName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setA0Des(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setTopValue(cursor.getFloat(offset + 4));
        entity.setBottomValue(cursor.getFloat(offset + 5));
        entity.setPointsNumber(cursor.getInt(offset + 6));
        entity.setDuration(cursor.getFloat(offset + 7));
        entity.setCsvFileName(cursor.getFloat(offset + 8));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(BoreholeInfoTable entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(BoreholeInfoTable entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(BoreholeInfoTable entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
